package com.james.leetcode.hash;

import java.util.HashMap;
import java.util.Map;

/**
 * 四数相加 II
 *
 * 给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。
 * 为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。
 *
 * 例如:
 * 输入:
 * A = [ 1, 2]
 * B = [-2,-1]
 * C = [-1, 2]
 * D = [ 0, 2]
 * 输出:2
 * 解释:
 * 两个元组如下:
 * 1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
 * 2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0
 */
public class FourSumCount {

    /**
     * 暴露穷举法
     * O（n^4）
     */
    static class Solution {
        public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
            if(A == null || A.length == 0) return 0;
            int length = A.length;
            int count = 0;
            for (int i = 0; i < length; i++) {
                for (int j = 0; j < length; j++) {
                    for (int k = 0; k < length; k++) {
                        for (int l = 0; l < length; l++) {
                            if(A[i] + B[j] + C[k] + D[l] == 0){
                                count++;
                            }
                        }
                    }
                }
            }
            return count;
        }
    }

    /**
     * 先计算 A[i] + B[j]的和 作为map的key
     * 再计算 C[k] + D[l]的和  做为差
     *
     * O(n^2)
     */
    static class Solution2 {
        public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
            if(A == null || A.length == 0) return 0;
            int length = A.length;
            int count = 0;
            Map<Integer, Integer> sumMap = new HashMap<>();
            for (int i = 0; i < length; i++) {
                for (int j = 0; j < length; j++) {
                    int sum = A[i] + B[j];
                    Integer c = sumMap.get(sum);
                    if(c == null) c = 0;
                    sumMap.put(sum, ++c);
                }
            }

            for (int k = 0; k < length; k++) {
                for (int l = 0; l < length; l++) {
                    int sum = -(C[k] + D[l]);
                    if(sumMap.containsKey(sum))
                        count += sumMap.get(sum);
                }
            }
            return count;
        }
    }
    public static void main(String[] args) {

        int[] A = {1,2,1,2,-1,1,2,1,2,1,2,-1,1,2};
        int[] B = {-2,-1,1,-2,2,0,1,1,2,1,2,-1,1,2};
        int[] C = {-1,2,2,-1,2,-1,1,1,2,1,2,-1,1,2};
        int[] D = {0,2,-1,0,-1,0,0,1,2,1,2,-1,1,2};

        /*
        int[] A = {3,8,-24,-27,-32,-2,-1,4,7,-26,-16,-16,6,-11,-6,-22,-12,-8,-30,-25,-12,8,0,2,-11,-1,9,4,-26,-12,-9,-16,-27,-4,-6,-18,-13,-8,-22,0,2,-10,-21,-32,9,8,-3,-24,-18,-25,5,-4,-18,7,-25,-15,7,-27,-30,-10,-9,8,-31,1,-17,-13,-5,-12,-1,-24,-22,-20,-25,-7,8,-27,7,7,-27,-25,-30,-27,10,10,1,-23,-11,-30,1,-1,-25,-21,-26,-25,-27,9,-31,-9,-17,-14,3,8,-24,-27,-32,-2,-1,4,7,-26,-16,-16,6,-11,-6,-22,-12,-8,-30,-25,-12,8,0,2,-11,-1,9,4,-26,-12,-9,-16,-27,-4,-6,-18,-13,-8,-22,0,2,-10,-21,-32,9,8,-3,-24,-18,-25,5,-4,-18,7,-25,-15,7,-27,-30,-10,-9,8,-31,1,-17,-13,-5,-12,-1,-24,-22,-20,-25,-7,8,-27,7,7,-27,-25,-30,-27,10,10,1,-23,-11,-30,1,-1,-25,-21,-26,-25,-27,9,-31,-9,-17,-14};
        int[] B = {-19,10,-31,-24,-24,8,-18,-11,-11,0,-32,-9,-4,7,-12,-18,-10,-22,-3,-17,0,-9,-15,6,-24,-18,-25,10,1,-5,2,10,-10,-25,-18,-30,-8,-5,-29,-4,-6,-4,9,-28,-6,-13,-30,-29,9,9,-20,-25,-30,-17,-32,-30,-27,-8,-19,4,3,-1,-3,-24,-9,6,-1,-30,8,-25,9,-31,-4,-5,-13,-4,4,-22,-22,2,-5,-3,2,-25,-31,-10,-19,8,-18,4,-23,-27,-4,-24,1,-9,6,-20,9,-5,3,8,-24,-27,-32,-2,-1,4,7,-26,-16,-16,6,-11,-6,-22,-12,-8,-30,-25,-12,8,0,2,-11,-1,9,4,-26,-12,-9,-16,-27,-4,-6,-18,-13,-8,-22,0,2,-10,-21,-32,9,8,-3,-24,-18,-25,5,-4,-18,7,-25,-15,7,-27,-30,-10,-9,8,-31,1,-17,-13,-5,-12,-1,-24,-22,-20,-25,-7,8,-27,7,7,-27,-25,-30,-27,10,10,1,-23,-11,-30,1,-1,-25,-21,-26,-25,-27,9,-31,-9,-17,-14};
        int[] C = {4,-28,-6,-30,5,-27,-15,-19,-32,-10,-27,-22,8,-14,-15,7,-23,-8,-22,3,-18,-4,6,-27,-32,-27,1,-31,10,8,-5,8,2,0,-30,-5,-22,-23,-14,-23,-16,-11,-6,-30,-23,-2,-1,4,-10,-25,9,10,-25,-15,-16,-5,-8,-14,-2,-25,-3,-20,-28,-8,9,-24,0,-22,-15,8,-19,-6,-1,-14,-20,-22,-27,-12,8,-8,-27,-21,-29,-3,-7,-32,-26,10,4,-9,-28,-12,-7,-19,-4,-14,10,-18,0,2,3,8,-24,-27,-32,-2,-1,4,7,-26,-16,-16,6,-11,-6,-22,-12,-8,-30,-25,-12,8,0,2,-11,-1,9,4,-26,-12,-9,-16,-27,-4,-6,-18,-13,-8,-22,0,2,-10,-21,-32,9,8,-3,-24,-18,-25,5,-4,-18,7,-25,-15,7,-27,-30,-10,-9,8,-31,1,-17,-13,-5,-12,-1,-24,-22,-20,-25,-7,8,-27,7,7,-27,-25,-30,-27,10,10,1,-23,-11,-30,1,-1,-25,-21,-26,-25,-27,9,-31,-9,-17,-14};
        int[] D = {-4,-18,-21,-12,0,-2,-22,-8,-22,-26,-28,0,-1,-28,-10,-15,-5,-30,-12,8,8,-23,-15,-18,4,-29,-2,-9,-19,5,9,-29,2,7,-15,-17,10,-9,-25,1,-9,9,-24,-6,-12,-9,-29,-5,-16,-18,-22,-20,-29,7,-8,-12,-8,-21,10,-24,-26,7,-23,-15,6,-8,-4,3,9,-30,-5,-4,-22,1,8,-29,-31,-28,-29,-27,-5,-1,-15,-17,10,-3,-1,-24,5,-32,7,-17,-7,-22,-15,1,-24,2,-14,-10,3,8,-24,-27,-32,-2,-1,4,7,-26,-16,-16,6,-11,-6,-22,-12,-8,-30,-25,-12,8,0,2,-11,-1,9,4,-26,-12,-9,-16,-27,-4,-6,-18,-13,-8,-22,0,2,-10,-21,-32,9,8,-3,-24,-18,-25,5,-4,-18,7,-25,-15,7,-27,-30,-10,-9,8,-31,1,-17,-13,-5,-12,-1,-24,-22,-20,-25,-7,8,-27,7,7,-27,-25,-30,-27,10,10,1,-23,-11,-30,1,-1,-25,-21,-26,-25,-27,9,-31,-9,-17,-14};
        */
        Long begin = System.currentTimeMillis();
        System.out.println(new Solution().fourSumCount(A, B, C, D));
        System.out.println("cost: "+ (System.currentTimeMillis() - begin));

        begin = System.currentTimeMillis();
        System.out.println(new Solution().fourSumCount(A, B, C, D));
        System.out.println("cost: "+ (System.currentTimeMillis() - begin));

        begin = System.currentTimeMillis();
        System.out.println(new Solution().fourSumCount(A, B, C, D));
        System.out.println("cost: "+ (System.currentTimeMillis() - begin));

        begin = System.currentTimeMillis();
        System.out.println(new Solution2().fourSumCount(A, B, C, D));
        System.out.println("cost: "+ (System.currentTimeMillis() - begin));

        begin = System.currentTimeMillis();
        System.out.println(new Solution2().fourSumCount(A, B, C, D));
        System.out.println("cost: "+ (System.currentTimeMillis() - begin));

        begin = System.currentTimeMillis();
        System.out.println(new Solution2().fourSumCount(A, B, C, D));
        System.out.println("cost: "+ (System.currentTimeMillis() - begin));
    }
}
